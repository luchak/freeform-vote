{"version":3,"sources":["rating.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["zip","a","b","minLength","i","regenerator_default","wrap","_context","prev","next","Math","min","length","stop","_marked","shuffle","array","slice","j","floor","random","temp","scoreVotes","votes","optimism","samples","accumulatedDistributions","Map","contest","Contest","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","undefined","_step4","_iterator4","Symbol","iterator","done","ranking","value","update","err","return","accumulateRatings","distributions","normFactor","scores","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","entries","_ref3","_ref2","Object","slicedToArray","id","distribution","score","mu","sqrt","sigma2","push","sort","distributionsToScores","_defaultMu","_defaultSigma","classCallCheck","this","_ratings","accumulator","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_ref6","_ref5","rating","oldDistribution","get","newDistribution","sigma","set","newRating","Rating","ratingGroups","_rankingToRatingGroups","newRatingGroups","rate","_updateRatings","groups","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","rankGroup","group","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","addEntry","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_ref9","_ref8","ratingGroup","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref12","_ref11","App","_useState","useState","toString","_useState2","setOptimism","_useState3","_useState4","setSamples","_useState5","_useState6","setVotes","_useState7","_useState8","result","setResult","react_default","createElement","Fragment","href","style","display","gridTemplateColumns","onSubmit","event","parsedVotes","data","rankings","trim","replace","console","log","stringRankings","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","stringRanking","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","stringRankGroup","Error","warn","parseVoteData","parseInt","map","index","concat","join","preventDefault","type","name","onChange","target","max","rows","cols","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78a07821.chunk.js","sourcesContent":["import { rate, Rating } from \"ts-trueskill\";\n\ntype EntryID = string;\n\ntype EntryRanking = EntryID[][];\ntype RatingGroup = Rating[];\ntype NormalDistribution = { mu: number; sigma2: number };\ntype EntryScore = { id: EntryID; score: number };\n\nfunction* zip<T, U>(a: T[], b: U[]): IterableIterator<[T, U]> {\n  const minLength = Math.min(a.length, b.length);\n  for (let i = 0; i < minLength; ++i) {\n    yield [a[i], b[i]];\n  }\n}\n\nfunction shuffle<T>(array: T[]): T[] {\n  array = array.slice();\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nexport function parseVoteData(data: string): EntryRanking[] {\n  const rankings: EntryRanking[] = [];\n\n  data = data.trim();\n  data = data.replace(\"\\r\\n\", \"\\n\");\n  data = data.replace(/\\n[ \\t\\n]+\\n/, \"\\n\\n\");\n  data = data.replace(/[ \\t]+/, \" \");\n\n  console.log('cleaned\\n', data);\n\n  const stringRankings = data.split(\"\\n\\n\");\n  for (let stringRanking of stringRankings) {\n    const ranking: EntryRanking = [];\n    for (let stringRankGroup of stringRanking.split(\"\\n\")) {\n      stringRankGroup = stringRankGroup.trim();\n        console.log(\"group\", stringRankGroup);\n      const rankGroup = stringRankGroup.split(\" \");\n      if (rankGroup.length === 0) {\n        throw new Error(\"0 length rank group found\");\n      }\n      ranking.push(rankGroup);\n    }\n    if (ranking.length > 1) {\n      rankings.push(ranking);\n    } else {\n      console.warn(\"Ignoring too-short ranking:\", ranking);\n    }\n  }\n\n  return rankings;\n}\n\nexport function distributionsToScores(\n  distributions: Map<EntryID, NormalDistribution>,\n  optimism: number,\n  normFactor: number\n): EntryScore[] {\n  const scores: EntryScore[] = [];\n  for (let [id, distribution] of distributions.entries()) {\n    const normalizedMu = distribution.mu / normFactor;\n    const normalizedSigma = Math.sqrt(distribution.sigma2 / normFactor);\n    const score = normalizedMu + optimism * normalizedSigma;\n    scores.push({ id, score });\n  }\n  // Sort by score, descending\n  return scores.sort((a, b) => b.score - a.score);\n}\n\nexport function scoreVotes(\n  votes: EntryRanking[],\n  optimism: number,\n  samples: number\n): EntryScore[] {\n  const accumulatedDistributions: Map<EntryID, NormalDistribution> = new Map();\n  for (let i = 0; i < samples; ++i) {\n    const contest = new Contest();\n    for (let ranking of shuffle(votes)) {\n      contest.update(ranking);\n    }\n    contest.accumulateRatings(accumulatedDistributions);\n  }\n\n  const scores = distributionsToScores(\n    accumulatedDistributions,\n    optimism,\n    samples\n  );\n  return scores;\n}\n\nexport default class Contest {\n  private _ratings: Map<EntryID, Rating>;\n\n  public constructor(\n    private _defaultMu?: number,\n    private _defaultSigma?: number\n  ) {\n    this._ratings = new Map();\n  }\n\n  public accumulateRatings(\n    accumulator: Map<EntryID, NormalDistribution>\n  ): void {\n    for (let [id, rating] of this._ratings.entries()) {\n      let oldDistribution = accumulator.get(id);\n      const newDistribution = {\n        mu: rating.mu,\n        sigma2: rating.sigma * rating.sigma\n      };\n      if (oldDistribution) {\n        newDistribution.mu += oldDistribution.mu;\n        newDistribution.sigma2 += oldDistribution.sigma2;\n      }\n      accumulator.set(id, newDistribution);\n    }\n  }\n\n  public addEntry(id: EntryID, mu?: number, sigma?: number): Rating {\n    const newRating = new Rating(\n      mu || this._defaultMu,\n      sigma || this._defaultSigma\n    );\n    this._ratings.set(id, newRating);\n    return newRating;\n  }\n\n  public update(ranking: EntryRanking) {\n    const ratingGroups = this._rankingToRatingGroups(ranking);\n    const newRatingGroups = rate(ratingGroups);\n    this._updateRatings(ranking, newRatingGroups);\n  }\n\n  private _rankingToRatingGroups(ranking: EntryRanking) {\n    const groups: RatingGroup[] = [];\n\n    for (let rankGroup of ranking) {\n      const group: RatingGroup = [];\n      for (let id of rankGroup) {\n        let rating = this._ratings.get(id);\n        if (!rating) {\n          rating = this.addEntry(id);\n        }\n        group.push(rating);\n      }\n      groups.push(group);\n    }\n\n    return groups;\n  }\n\n  private _updateRatings(\n    ranking: EntryRanking,\n    newRatingGroups: RatingGroup[]\n  ) {\n    for (let [rankGroup, ratingGroup] of zip(ranking, newRatingGroups)) {\n      for (let [id, rating] of zip(rankGroup, ratingGroup)) {\n        this._ratings.set(id, rating);\n      }\n    }\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { scoreVotes, parseVoteData } from \"./rating\";\n\nconst defaultOptimism = -3;\nconst defaultSamples = 100;\nconst sampleVotes = `Asiago Brie\nCheddar\n\nBrie Cheddar\nAsiago\n\nAsiago\nBrie\n\nCheddar\nAsiago\nDanishBlue\n\nBrie\nAsiago\nCheddar\n\nBrie\nDanishBlue\nAsiago\nCheddar\n\n`;\n\nconst App: React.FC = () => {\n  const [optimism, setOptimism] = useState(defaultOptimism.toString());\n  const [samples, setSamples] = useState(defaultSamples.toString());\n  const [votes, setVotes] = useState(sampleVotes);\n  const [result, setResult] = useState<string | null>(null);\n\n  return (\n    <>\n      <div>Provide rankings, get scores!</div>\n      <div>&nbsp;</div>\n      <div>This page demonstrates using <a href=\"https://trueskill.org/\">TrueSkill</a> to construct a voting system where\n      not every voter has to evaluate every entry. Each voter instead ranks every entry they have an opinion about.\n      We can get scores (and therefore a consensus ranking) from these inputs by treating each voter's ranking as the\n      result of a free-for-all match between all the entries they ranked, and use TrueSkill to update entry ratings\n      based on the results of each match.</div>\n      <div>\n        <h3>Instructions</h3>\n      </div>\n      <div>\n        <b>Votes:</b> each block of lines below is an individual voter's ranking. Entries\n        that come first are ranked higher, entries appearing on the same line are\n        ties. For example: in the default rankings in the box below, the first user\n        has ranked Asiago and Brie tied for first, with Cheddar coming in\n        second. The second user ranked Brie and Cheddar first, and Asiago\n        second.\n      </div>\n      <div>\n        <b>Optimism</b> controls how much we credit (positive values) or\n        penalize (negative values) entries with uncertain scores: controversial\n        entries, or entries without many votes. Best to keep this zero or\n        negative. (Details: controls how many standard deviations we should\n        add/subtract from the mean of each entry's rating distribution to arrive\n        at a final score.)\n      </div>\n      <div>\n        <b>Samples</b> trades off computation time versus the stability of the\n        final result. Use a low value for quick approximate answers, a higher\n        value for more repeatable ones. (Details: the order in which we run \"matches\" affects the final result. This\n        samples multiple orders and averages the results.)\n      </div>\n      <div style={{display: 'grid', gridTemplateColumns: '50% 50%'}}>\n      <div>\n      <div>\n        <h3>Inputs</h3>\n      </div>\n      <div>\n        <form onSubmit={(event) => {\n          const parsedVotes = parseVoteData(votes);\n          console.log('---');\n          console.log(parsedVotes);\n          console.log('---');\n          const scores = scoreVotes(parsedVotes, parseInt(optimism, 10), parseInt(samples, 10));\n          setResult(scores.map((score, index) => `${index + 1}\\t${score.score}\\t${score.id}`).join('\\n'));\n          console.log(result);\n          event.preventDefault();\n        }\n        }>\n          <div>\n            <label>Optimism (-3 to -2 seems ideal):</label>\n            <input\n              type=\"text\"\n              id=\"optimism\"\n              name=\"optimism\"\n              value={optimism}\n              onChange={event => setOptimism(event.target.value)}\n            />\n          </div>\n          <div>\n            <label>Samples (1 to 10000):</label>\n            <input\n              type=\"number\"\n              id=\"epochs\"\n              name=\"epochs\"\n              min=\"1\"\n              max=\"10000\"\n              value={samples}\n              onChange={event => setSamples(event.target.value)}\n            />\n          </div>\n          <div>\n            <label>Votes:</label>\n          </div>\n          <div>\n            <textarea id=\"votes\" name=\"votes\" rows={30} cols={60} value={votes} onChange={event => setVotes(event.target.value)}/>\n          </div>\n          <div>\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n      </div>\n      <div>\n        <h3>Results</h3>\n        {\n          result && <pre>{result}</pre>\n        }\n      </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}