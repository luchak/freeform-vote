{"version":3,"sources":["rating.ts","TrueSkillForm.tsx","PointsForm.tsx","AveragePointsForm.tsx","simulation.ts","SimulateForm.tsx","ScoreApp.tsx","Form.tsx","analyze.ts","ContestsAnalysis.tsx","App.tsx","AnalyzeApp.tsx","serviceWorker.ts","index.tsx"],"names":["zip","a","b","minLength","i","regenerator_default","wrap","_context","prev","next","Math","min","length","stop","_marked","shuffle","array","slice","j","floor","random","temp","sortScoreDescending","scores","sort","score","parseVoteData","data","rankings","stringRankings","trim","replace","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","stringRanking","value","ranking","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","stringRankGroup","rankGroup","Error","push","err","return","console","warn","scoreVotesByPoints","votes","pointsByRank","scoreMap","Map","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","place","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","rankEntries","rankPoints","delta","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","id","currentScore","get","set","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","entries","_ref6","_ref5","Object","slicedToArray","scoreVotesByAveragePoints","smoothing","countMap","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","currentCount","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref9","_ref8","scoreVotesTrueSkill","optimism","samples","accumulatedDistributions","contest","Contest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","update","accumulateRatings","distributions","normFactor","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref3","_ref2","distribution","mu","sqrt","sigma2","distributionsToScores","_defaultMu","_defaultSigma","classCallCheck","this","_ratings","accumulator","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_ref12","_ref11","rating","oldDistribution","newDistribution","sigma","newRating","Rating","ratingGroups","_rankingToRatingGroups","newRatingGroups","rate","_updateRatings","groups","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","group","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","addEntry","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref15","_ref14","ratingGroup","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref18","_ref17","trueSkillInstructions","react_default","createElement","Fragment","pointsInstructions","averagePointsInstructions","sampleNormal","dist","x0","x1","r","s","log","idxToID","idx","result","charIdx","String","fromCharCode","charCodeAt","genEntries","qualityDist","tasteStddev","pListenDist","numEntries","entry","pListen","quality","simulate","numRankings","maxRankingLength","simulateVoter","voterScores","map","SimulateForm","props","_useState","useState","toString","_useState2","setNumEntries","_useState3","_useState4","setTasteStddev","_useState5","_useState6","meanPListen","setMeanPListen","_useState7","_useState8","minPListen","setMinPListen","_useState9","_useState10","setNumRankings","_useState11","_useState12","setMaxRankingLength","onSubmit","event","pListenMu","parseFloat","pListenSigma","entryProperties","parseInt","setVotes","join","rankingsToText","preventDefault","type","name","onChange","target","FORMS","averagePoints","form","setRankPoints","setSmoothing","rankPointsList","item","setResult","index","concat","toFixed","rows","cols","instructions","points","trueSkill","setOptimism","setSamples","max","Form","inputs","assign","apply","toConsumableArray","_ref","input","defineProperty","defaultValue","values","setValues","keyOrder","keys","order","key","Form_FormInput","setValue","FormInput","label","size","analyzeContestResults","rankStats","entryToRank","allCorrect","trueRank","currentRankStats","contests","contestsCorrect","contestsCorrectToHere","totalTrueRank","rankDiff","totalTrueRankL1Diff","abs","totalTrueRankL2Diff","ContestsAnalysis","analysis","scoreFn","contestScores","finalRankStats","_i2","_rankStats","rank","analyzeScoreMethod","MODES","method","setMethod","_FORMS$method","style","display","gridTemplateColumns","React","SimulateForm_SimulateForm","analyze","setContests","pointsParams","setPointsParams","avgPointsParams","setAvgPointsParams","numSamples","tsParams","setTSParams","Form_Form","numContests","tasteDeviation","pListenMean","pow","pListenStddev","numTSSamples","ContestsAnalysis_ContestsAnalysis","App","mode","setMode","href","checked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a60bdf17.chunk.js","sourcesContent":["import { rate, Rating } from \"ts-trueskill\";\n\nexport type EntryID = string;\n\nexport type EntryRanking = EntryID[][];\ntype RatingGroup = Rating[];\nexport type LogisticDistribution = { mu: number; s: number };\nexport type NormalDistribution = { mu: number; sigma2: number };\nexport type EntryScore = { id: EntryID; score: number };\n\nfunction* zip<T, U>(a: T[], b: U[]): IterableIterator<[T, U]> {\n  const minLength = Math.min(a.length, b.length);\n  for (let i = 0; i < minLength; ++i) {\n    yield [a[i], b[i]];\n  }\n}\n\nfunction shuffle<T>(array: T[]): T[] {\n  array = array.slice();\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nexport function sortScoreDescending(scores: EntryScore[]): EntryScore[] {\n  return scores.sort((a, b) => b.score - a.score);\n}\n\nexport function parseVoteData(data: string): EntryRanking[] {\n  const rankings: EntryRanking[] = [];\n\n  data = data.trim();\n  data = data.replace(\"\\r\\n\", \"\\n\");\n  data = data.replace(/\\n[ \\t\\n]+\\n/g, \"\\n\\n\");\n  data = data.replace(/[ \\t]+/g, \" \");\n\n  const stringRankings = data.split(\"\\n\\n\");\n  for (let stringRanking of stringRankings) {\n    const ranking: EntryRanking = [];\n    for (let stringRankGroup of stringRanking.split(\"\\n\")) {\n      stringRankGroup = stringRankGroup.trim();\n      const rankGroup = stringRankGroup.split(\" \");\n      if (rankGroup.length === 0) {\n        throw new Error(\"0 length rank group found\");\n      }\n      ranking.push(rankGroup);\n    }\n    if (ranking.length > 1) {\n      rankings.push(ranking);\n    } else {\n      console.warn(\"Ignoring too-short ranking:\", ranking);\n    }\n  }\n\n  return rankings;\n}\n\nexport function distributionsToScores(\n  distributions: Map<EntryID, NormalDistribution>,\n  optimism: number,\n  normFactor: number\n): EntryScore[] {\n  const scores: EntryScore[] = [];\n  for (let [id, distribution] of distributions.entries()) {\n    const normalizedMu = distribution.mu / normFactor;\n    const normalizedSigma = Math.sqrt(distribution.sigma2 / normFactor);\n    const score = normalizedMu + optimism * normalizedSigma;\n    scores.push({ id, score });\n  }\n  return scores;\n}\n\nexport function scoreVotesByPoints(\n  votes: EntryRanking[],\n  pointsByRank: number[]\n): EntryScore[] {\n  const scoreMap: Map<EntryID, number> = new Map();\n\n  for (let ranking of votes) {\n    let place = 0;\n    for (let rankEntries of ranking) {\n      let rankPoints = 0;\n      for (let i = 0; i < rankEntries.length; i++) {\n        rankPoints += pointsByRank[place++] || 0;\n      }\n      const delta = rankPoints / rankEntries.length;\n      for (let id of rankEntries) {\n        let currentScore = scoreMap.get(id) || 0;\n        currentScore += delta;\n        scoreMap.set(id, currentScore);\n      }\n    }\n  }\n\n  const scores: EntryScore[] = [];\n  for (let [id, score] of scoreMap.entries()) {\n    scores.push({ id, score });\n  }\n\n  return sortScoreDescending(scores);\n}\n\nexport function scoreVotesByAveragePoints(\n  votes: EntryRanking[],\n  pointsByRank: number[],\n  smoothing: number\n): EntryScore[] {\n  const scoreMap: Map<EntryID, number> = new Map();\n  const countMap: Map<EntryID, number> = new Map();\n\n  for (let ranking of votes) {\n    let place = 0;\n    for (let rankEntries of ranking) {\n      let rankPoints = 0;\n      for (let i = 0; i < rankEntries.length; i++) {\n        rankPoints += pointsByRank[place++] || 0;\n      }\n      const delta = rankPoints / rankEntries.length;\n      for (let id of rankEntries) {\n        let currentScore = scoreMap.get(id) || 0;\n        let currentCount = countMap.get(id) || smoothing;\n        currentScore += delta;\n        currentCount += 1;\n        scoreMap.set(id, currentScore);\n        countMap.set(id, currentCount);\n      }\n    }\n  }\n\n  const scores: EntryScore[] = [];\n  for (let [id, score] of scoreMap.entries()) {\n    scores.push({ id, score: score / countMap.get(id)! });\n  }\n\n  return sortScoreDescending(scores);\n}\n\nexport function scoreVotesTrueSkill(\n  votes: EntryRanking[],\n  optimism: number,\n  samples: number\n): EntryScore[] {\n  const accumulatedDistributions: Map<EntryID, NormalDistribution> = new Map();\n  for (let i = 0; i < samples; ++i) {\n    const contest = new Contest();\n    for (let ranking of shuffle(votes)) {\n      contest.update(ranking);\n    }\n    contest.accumulateRatings(accumulatedDistributions);\n  }\n\n  const scores = distributionsToScores(\n    accumulatedDistributions,\n    optimism,\n    samples\n  );\n\n  return sortScoreDescending(scores);\n}\n\nexport default class Contest {\n  private _ratings: Map<EntryID, Rating>;\n\n  public constructor(\n    private _defaultMu?: number,\n    private _defaultSigma?: number\n  ) {\n    this._ratings = new Map();\n  }\n\n  public accumulateRatings(\n    accumulator: Map<EntryID, NormalDistribution>\n  ): void {\n    for (let [id, rating] of this._ratings.entries()) {\n      let oldDistribution = accumulator.get(id);\n      const newDistribution = {\n        mu: rating.mu,\n        sigma2: rating.sigma * rating.sigma\n      };\n      if (oldDistribution) {\n        newDistribution.mu += oldDistribution.mu;\n        newDistribution.sigma2 += oldDistribution.sigma2;\n      }\n      accumulator.set(id, newDistribution);\n    }\n  }\n\n  public addEntry(id: EntryID, mu?: number, sigma?: number): Rating {\n    const newRating = new Rating(\n      mu || this._defaultMu,\n      sigma || this._defaultSigma\n    );\n    this._ratings.set(id, newRating);\n    return newRating;\n  }\n\n  public update(ranking: EntryRanking) {\n    if (ranking.length < 2) {\n      // rankings that provide no info will throw\n      return;\n    }\n    const ratingGroups = this._rankingToRatingGroups(ranking);\n    const newRatingGroups = rate(ratingGroups);\n    this._updateRatings(ranking, newRatingGroups);\n  }\n\n  private _rankingToRatingGroups(ranking: EntryRanking) {\n    const groups: RatingGroup[] = [];\n\n    for (let rankGroup of ranking) {\n      const group: RatingGroup = [];\n      for (let id of rankGroup) {\n        let rating = this._ratings.get(id);\n        if (!rating) {\n          rating = this.addEntry(id);\n        }\n        group.push(rating);\n      }\n      groups.push(group);\n    }\n\n    return groups;\n  }\n\n  private _updateRatings(\n    ranking: EntryRanking,\n    newRatingGroups: RatingGroup[]\n  ) {\n    for (let [rankGroup, ratingGroup] of zip(ranking, newRatingGroups)) {\n      for (let [id, rating] of zip(rankGroup, ratingGroup)) {\n        this._ratings.set(id, rating);\n      }\n    }\n  }\n}\n","import React, { useState } from \"react\";\nimport { parseVoteData, scoreVotesTrueSkill } from \"./rating\";\n\nconst defaultOptimism = -3;\nconst defaultSamples = 100;\n\nexport const trueSkillInstructions = (\n  <>\n    <div>\n      <b>Optimism</b> controls how much we credit (positive values) or penalize\n      (negative values) entries with uncertain scores: controversial entries, or\n      entries without many votes. Best to keep this zero or negative. (Details:\n      controls how many standard deviations we should add/subtract from the mean\n      of each entry's rating distribution to arrive at a final score.)\n    </div>\n    <div>\n      <b>Samples</b> trades off computation time versus the stability of the\n      final result. Use a low value for quick approximate answers, a higher\n      value for more repeatable ones. (Details: the order in which we run\n      \"matches\" affects the final result. This samples multiple orders and\n      averages the results.)\n    </div>\n  </>\n);\n\nexport const TrueSkillForm = (props: {\n  votes: string;\n  setVotes: (votes: string) => void;\n  setResult: (result: string) => void;\n}) => {\n  const [optimism, setOptimism] = useState(defaultOptimism.toString());\n  const [samples, setSamples] = useState(defaultSamples.toString());\n\n  return (\n    <form\n      onSubmit={event => {\n        const parsedVotes = parseVoteData(props.votes);\n        const scores = scoreVotesTrueSkill(\n          parsedVotes,\n          parseFloat(optimism),\n          parseInt(samples, 10)\n        );\n        props.setResult(\n          scores\n            .map(\n              (score, index) =>\n                `${index + 1}\\t${score.score.toFixed(3)}\\t${score.id}`\n            )\n            .join(\"\\n\")\n        );\n        event.preventDefault();\n      }}\n    >\n      <div>\n        <label>Optimism (-3 to -2 seems ideal):</label>\n        <input\n          type=\"text\"\n          id=\"optimism\"\n          name=\"optimism\"\n          value={optimism}\n          onChange={event => setOptimism(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Samples (1 to 10000):</label>\n        <input\n          type=\"number\"\n          id=\"epochs\"\n          name=\"epochs\"\n          min=\"1\"\n          max=\"10000\"\n          value={samples}\n          onChange={event => setSamples(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Votes:</label>\n      </div>\n      <div>\n        <textarea\n          id=\"votes\"\n          name=\"votes\"\n          rows={30}\n          cols={60}\n          value={props.votes}\n          onChange={event => props.setVotes(event.target.value)}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from \"react\";\nimport { parseVoteData, scoreVotesByPoints } from \"./rating\";\n\nconst defaultRankPoints = \"5,4,3,2,1\";\n\nexport const pointsInstructions = (\n  <>\n    <div>\n      <b>Points by rank</b> is how many points entries get for each time they\n      are listed at each rank, in descending order. So the default value of\n      \"3,2,1\" means that first place gets 3 points, second gets 2, etc. Ties are\n      split equally, so 2 entries tied for first/second with the default 3,2,1\n      scoring each get 2.5 points.\n    </div>\n  </>\n);\n\nexport const PointsForm = (props: {\n  votes: string;\n  setVotes: (votes: string) => void;\n  setResult: (result: string) => void;\n}) => {\n  const [rankPoints, setRankPoints] = useState(defaultRankPoints.toString());\n\n  return (\n    <form\n      onSubmit={event => {\n        const rankPointsList = rankPoints\n          .split(\",\")\n          .map(item => parseFloat(item.trim()));\n        const parsedVotes = parseVoteData(props.votes);\n        const scores = scoreVotesByPoints(parsedVotes, rankPointsList);\n        props.setResult(\n          scores\n            .map(\n              (score, index) =>\n                `${index + 1}\\t${score.score.toFixed(3)}\\t${score.id}`\n            )\n            .join(\"\\n\")\n        );\n        event.preventDefault();\n      }}\n    >\n      <div>\n        <label>Points by rank:</label>\n        <input\n          type=\"text\"\n          id=\"rankPoints\"\n          name=\"rankPoints\"\n          value={rankPoints}\n          onChange={event => setRankPoints(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Votes:</label>\n      </div>\n      <div>\n        <textarea\n          id=\"votes\"\n          name=\"votes\"\n          rows={30}\n          cols={60}\n          value={props.votes}\n          onChange={event => props.setVotes(event.target.value)}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from \"react\";\nimport { parseVoteData, scoreVotesByAveragePoints } from \"./rating\";\n\nconst defaultRankPoints = \"5,4,3,2,1\";\nconst defaultSmoothing = 1;\n\nexport const averagePointsInstructions = (\n  <>\n    <div>\n      <b>Points by rank</b> is how many points entries get for each time they\n      are listed at each rank, in descending order. So the default value of\n      \"3,2,1\" means that first place gets 3 points, second gets 2, etc. Ties are\n      split equally, so 2 entries tied for first/second with the default 3,2,1\n      scoring each get 2.5 points.\n    </div>\n    <div>\n      <b>Smoothing</b> helps to stabilize (and reduce) the scores of mixes with\n      a small number of rankings. If smoothing is 1, each mix is treated as\n      though there were 1 extra ranking where it appeared rated too low to\n      receive any points.\n    </div>\n  </>\n);\n\nexport const AveragePointsForm = (props: {\n  votes: string;\n  setVotes: (votes: string) => void;\n  setResult: (result: string) => void;\n}) => {\n  const [rankPoints, setRankPoints] = useState(defaultRankPoints.toString());\n  const [smoothing, setSmoothing] = useState(defaultSmoothing.toString());\n\n  return (\n    <form\n      onSubmit={event => {\n        const rankPointsList = rankPoints\n          .split(\",\")\n          .map(item => parseInt(item.trim(), 10));\n        const parsedVotes = parseVoteData(props.votes);\n        const scores = scoreVotesByAveragePoints(\n          parsedVotes,\n          rankPointsList,\n          parseFloat(smoothing)\n        );\n        props.setResult(\n          scores\n            .map(\n              (score, index) =>\n                `${index + 1}\\t${score.score.toFixed(3)}\\t${score.id}`\n            )\n            .join(\"\\n\")\n        );\n        event.preventDefault();\n      }}\n    >\n      <div>\n        <label>Points by rank:</label>\n        <input\n          type=\"text\"\n          id=\"rankPoints\"\n          name=\"rankPoints\"\n          value={rankPoints}\n          onChange={event => setRankPoints(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Smoothing:</label>\n        <input\n          type=\"text\"\n          id=\"smoothing\"\n          name=\"smoothing\"\n          value={smoothing}\n          onChange={event => setSmoothing(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Votes:</label>\n      </div>\n      <div>\n        <textarea\n          id=\"votes\"\n          name=\"votes\"\n          rows={30}\n          cols={60}\n          value={props.votes}\n          onChange={event => props.setVotes(event.target.value)}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n","import { EntryID, EntryRanking, LogisticDistribution, EntryScore, sortScoreDescending, NormalDistribution } from \"./rating\";\n\nexport interface EntryProperties {\n    id: EntryID;\n    quality: NormalDistribution;\n    pListen: number;\n} \n\nfunction sampleLogistic(dist: LogisticDistribution): number {\n    const uniform = Math.random();\n    return dist.mu + dist.s * Math.log(uniform / (1 - uniform));\n}\n\nfunction sampleNormal(dist: NormalDistribution): number {\n    let x0 = 0;\n    let x1 = 0;\n    let r = 0;\n\n    while (r <= 0 || r >= 1) {\n        x0 = 2 * Math.random() - 1;\n        x1 = 2 * Math.random() - 1;\n        r = x0 * x0 + x1 * x1;\n    }\n \n    let s = Math.sqrt((-2 * Math.log(r)) / r);\n \n    return dist.mu + Math.sqrt(dist.sigma2) * x1 * s;\n}\n\nexport function idxToID(idx: number): EntryID {\n    let result = '';\n    for (;;) {\n        let charIdx = idx % 26;\n        idx = Math.floor(idx / 26);\n\n        if (result.length > 0) {\n            charIdx -= 1;\n        }\n        result = String.fromCharCode('A'.charCodeAt(0) + charIdx) + result;\n\n        if (idx === 0) {\n            break;\n        }\n    }\n    return result;\n}\n\nexport function genEntries(qualityDist: NormalDistribution, tasteStddev: number, pListenDist: NormalDistribution, numEntries: number): EntryProperties[] {\n    const result: EntryProperties[] = [];\n\n    for (let i = 0; i < numEntries; i++) {\n        const mu = sampleNormal(qualityDist);\n        const entry = { id: idxToID(i), pListen: 0, quality: { mu, sigma2: mu * mu * tasteStddev * tasteStddev } }\n        while (entry.pListen <= 0 || entry.pListen > 1) {\n            entry.pListen = sampleNormal(pListenDist);\n        }\n        result.push(entry);\n    }\n\n    result.sort((a, b) => b.quality.mu - a.quality.mu);\n    // Easier to understand results if IDs are in quality order...\n    for (let i = 0; i < result.length; i++) {\n        result[i].id = idxToID(i);\n    }\n\n    return result;\n}\n\nexport function simulate(entries: EntryProperties[], numRankings: number, maxRankingLength: number): EntryRanking[] {\n    const rankings: EntryRanking[] = [];\n    for (let i = 0; i < numRankings; i++) {\n        rankings.push(simulateVoter(entries, maxRankingLength));\n    }\n    return rankings;\n}\n\nfunction simulateVoter(entries: EntryProperties[], maxRankingLength?: number): EntryRanking {\n    const voterScores: EntryScore[] = [];\n\n\n    for (let entry of entries) {\n        if (Math.random() < entry.pListen) {\n            voterScores.push({id: entry.id, score: sampleNormal(entry.quality)});\n            if (maxRankingLength !== undefined && voterScores.length >= maxRankingLength) {\n                break;\n            }\n        }\n    }\n\n    sortScoreDescending(voterScores);\n    return voterScores.map(score => [score.id]);\n}\n","import React, { useState } from \"react\";\nimport { EntryRanking } from \"./rating\";\nimport { genEntries, simulate } from \"./simulation\";\n\nconst defaultNumEntries = 20;\nconst defaultNumRankings = 10;\nconst defaultMeanPListen = 0.5;\nconst defaultMinPListen = 0.2;\nconst defaultTasteStddev = 0.3;\nconst defaultMaxRankingLength = 5;\n\nfunction rankingsToText(rankings: EntryRanking[]): string {\n    let result = '';\n    for (let ranking of rankings) {\n        for (let rank of ranking) {\n            result += rank.join(' ');\n            result += '\\n';\n        }\n        result += '\\n';\n    }\n    return result;\n}\n\nexport const SimulateForm = (props: {\n  setVotes: (votes: string) => void;\n}) => {\n  const [numEntries, setNumEntries] = useState(defaultNumEntries.toString());\n  const [tasteStddev, setTasteStddev] = useState(defaultTasteStddev.toString());\n  const [meanPListen, setMeanPListen] = useState(defaultMeanPListen.toString());\n  const [minPListen, setMinPListen] = useState(defaultMinPListen.toString());\n  const [numRankings, setNumRankings] = useState(defaultNumRankings.toString());\n  const [maxRankingLength, setMaxRankingLength] = useState(defaultMaxRankingLength.toString());\n\n  return (\n    <form\n      onSubmit={event => {\n        const pListenMu = parseFloat(meanPListen);\n        const pListenMin = parseFloat(minPListen);\n        const pListenSigma = (pListenMu - pListenMin) / 2;\n        const entryProperties = genEntries({mu: 0, sigma2: 1}, parseFloat(tasteStddev), {mu: pListenMu, sigma2: pListenSigma * pListenSigma}, parseInt(numEntries, 10));\n        console.log('------------');\n        console.log(entryProperties);\n        const rankings = simulate(entryProperties, parseInt(numRankings, 10), parseInt(maxRankingLength, 10));\n        console.log(rankings);\n        props.setVotes(rankingsToText(rankings));\n        event.preventDefault();\n      }}\n    >\n      <div>\n        <label>Entry count:</label>\n        <input\n          type=\"text\"\n          id=\"numEntries\"\n          name=\"numEntries\"\n          value={numEntries}\n          onChange={event => setNumEntries(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Taste deviation (&lt; 1: mix quality determines score more than voter taste, &gt; 1: voter taste determines score more than mix quality):</label>\n        <input\n          type=\"text\"\n          id=\"tasteStddev\"\n          name=\"tasteStddev\"\n          value={tasteStddev}\n          onChange={event => setTasteStddev(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Mean listen probability</label>\n        <input\n          type=\"text\"\n          id=\"meanPListen\"\n          name=\"meanPListen\"\n          value={meanPListen}\n          onChange={event => setMeanPListen(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Min listen probability</label>\n        <input\n          type=\"text\"\n          id=\"minPListen\"\n          name=\"minPListen\"\n          value={minPListen}\n          onChange={event => setMinPListen(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Ranking count</label>\n        <input\n          type=\"text\"\n          id=\"numRankings\"\n          name=\"numRankings\"\n          value={numRankings}\n          onChange={event => setNumRankings(event.target.value)}\n        />\n      </div>\n      <div>\n        <label>Max ranking length</label>\n        <input\n          type=\"text\"\n          id=\"maxRankingLength\"\n          name=\"maxRankingLength\"\n          value={maxRankingLength}\n          onChange={event => setMaxRankingLength(event.target.value)}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from \"react\";\nimport { TrueSkillForm, trueSkillInstructions } from \"./TrueSkillForm\";\nimport { PointsForm, pointsInstructions } from \"./PointsForm\";\nimport {\n  AveragePointsForm,\n  averagePointsInstructions\n} from \"./AveragePointsForm\";\nimport { SimulateForm } from \"./SimulateForm\";\n\nconst sampleVotes = `Asiago Brie\nCheddar\n\nBrie Cheddar\nAsiago\n\nAsiago\nBrie\n\nCheddar\nAsiago\nDanishBlue\n\nBrie\nAsiago\nCheddar\n\nBrie\nDanishBlue\nAsiago\nCheddar\n\n`;\n\nconst FORMS = {\n  averagePoints: {\n    form: AveragePointsForm,\n    instructions: averagePointsInstructions\n  },\n  points: { form: PointsForm, instructions: pointsInstructions },\n  trueSkill: { form: TrueSkillForm, instructions: trueSkillInstructions }\n};\n\nexport const ScoreApp: React.FC = () => {\n  const [votes, setVotes] = useState(sampleVotes);\n  const [result, setResult] = useState<string | null>(null);\n  const [method, setMethod] = useState<keyof typeof FORMS>(\"trueSkill\");\n\n  const { form, instructions } = FORMS[method];\n\n  return (\n    <>\n      <div>\n        <h3>Instructions</h3>\n      </div>\n      <div>\n        <b>Votes:</b> each block of lines below is an individual voter's\n        ranking. Entries that come first are ranked higher, entries appearing on\n        the same line are ties. For example: in the default rankings in the box\n        below, the first user has ranked Asiago and Brie tied for first, with\n        Cheddar coming in second. The second user ranked Brie and Cheddar first,\n        and Asiago second.\n      </div>\n      {instructions}\n      <div style={{ display: \"grid\", gridTemplateColumns: \"50% 50%\" }}>\n        <div>\n          <div>\n            <h3>Inputs</h3>\n          </div>\n          <div>\n            <label>Method:</label>\n            <select\n              value={method}\n              onChange={event =>\n                setMethod(event.target.value as (keyof typeof FORMS))\n              }\n            >\n              {Object.keys(FORMS).map(key => (\n                <option key={key} value={key}>\n                  {key}\n                </option>\n              ))}\n            </select>\n          </div>\n          {\n            // TODO: setResult is the wrong thing to pass here, since it duplicates result formatting in all the form\n            // classes. Should just pass a function to get the raw scores instead and do presentation here. Also, maybe\n            // it would be better to pass the textarea as a child and have the forms render children?\n          }\n          <div>{React.createElement(form, { votes, setVotes, setResult })}</div>\n        </div>\n        <div>\n          <h3>Results</h3>\n          {result && <pre>{result}</pre>}\n        </div>\n      </div>\n      <h3>Simulate voting</h3>\n      <SimulateForm setVotes={setVotes} />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface FormInputProps {\n  label: string;\n  order: number;\n  defaultValue?: string;\n}\n\ninterface FormInputs {\n  [name: string]: FormInputProps;\n}\n\nexport const Form = <T extends FormInputs>(props: {\n  onSubmit: (values: {[name in keyof T]: string}) => void;\n  inputs: T;\n}) => {\n  const { inputs, onSubmit } = props;\n  const [ values, setValues ] = useState<{[key in keyof T]: string}>(\n      () =>\n      Object.assign({}, \n        ...Object.entries(inputs).map(([name, input]) => ({[name as keyof T]: input.defaultValue || ''}))\n        )\n  );\n\n  const keyOrder = Object.keys(inputs).sort(\n    (a, b) => inputs[a].order - inputs[b].order\n  );\n\n  return (\n    <form onSubmit={event => {\n        onSubmit(values);\n        event.preventDefault();\n        }}>\n      <div>\n        {keyOrder.map(key => (\n          <FormInput\n            key={key}\n            name={key}\n            value={values[key]}\n            setValue={value => setValues(values => Object.assign({}, values, {[key]: value}))}\n            {...inputs[key]}\n          />\n        ))}\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\n\nconst FormInput = (\n  props: {\n    name: string;\n    value: string;\n    setValue: (value: string) => void;\n  } & FormInputProps\n) => {\n  const { name, label, value, setValue } = props;\n  return (\n    <div>\n      <label>{label}</label>:{\" \"}\n      <input\n        type=\"text\"\n        name={name}\n        value={value}\n        size={10}\n        onChange={event => {\n            setValue(event.target.value);\n            event.preventDefault();\n        }}\n      />\n    </div>\n  );\n};\n","import { EntryRanking, EntryScore, EntryID } from \"./rating\";\nimport { idxToID } from \"./simulation\";\n\ninterface RankStats {\n  contests: number;\n  contestsCorrect: number;\n  contestsCorrectToHere: number;\n  totalTrueRank: number;\n  totalTrueRankL1Diff: number;\n  totalTrueRankL2Diff: number;\n}\n\n/**\n * Analyze scoring method.\n * @param contests Contest ranking data. Assumes best contestant is lexicographically first.\n */\nexport function analyzeScoreMethod(\n    numEntries: number,\n  contests: EntryRanking[][],\n  scoreFn: (votes: EntryRanking[]) => EntryScore[]\n): RankStats[] {\n  const contestScores = contests.map(scoreFn);\n\n  // Maybe should have just passed this in...\n  const entryToRank: Map<EntryID, number> = new Map();\n  for (let i = 0; i < numEntries; i++) {\n      entryToRank.set(idxToID(i), i);\n  }\n\n  const rankStats: RankStats[] = [];\n  for (let i = 0; i < entryToRank.size; i++) {\n    rankStats.push({\n      contests: 0,\n      contestsCorrect: 0,\n      contestsCorrectToHere: 0,\n      totalTrueRank: 0,\n        totalTrueRankL1Diff: 0,\n        totalTrueRankL2Diff: 0\n    });\n  }\n\n  for (let contestScore of contestScores) {\n    analyzeContestResults(rankStats, entryToRank, contestScore);\n  }\n\n  const finalRankStats: RankStats[] = [];\n  for (let rank of rankStats) {\n      if (rank.contests === 0) {\n          break\n      }\n      finalRankStats.push(rank);\n  }\n\n  return finalRankStats;\n}\n\nexport function analyzeContestResults(\n  rankStats: RankStats[],\n  entryToRank: Map<EntryID, number>,\n  scores: EntryScore[]\n) {\n  let allCorrect = true;\n  for (let i = 0; i < scores.length; i++) {\n    const score = scores[i];\n    const trueRank = entryToRank.get(score.id)!;\n    const currentRankStats = rankStats[i];\n\n    currentRankStats.contests += 1;\n    if (trueRank === i) {\n        currentRankStats.contestsCorrect += 1;\n        if (allCorrect) {\n            currentRankStats.contestsCorrectToHere += 1;\n        }\n    } else {\n        allCorrect = false;\n    }\n\n    currentRankStats.totalTrueRank += trueRank;\n\n    const rankDiff = i - trueRank;\n    currentRankStats.totalTrueRankL1Diff += Math.abs(rankDiff);\n    currentRankStats.totalTrueRankL2Diff += rankDiff * rankDiff;\n  }\n}\n\n// for each rank (in final results, not in \"true\" strength):\n// average \"true\" rank and absolute value of difference\n// correct-up-to-rank percentage\n// mean absolute rank error up to this rank\n","import React from \"react\";\nimport { EntryRanking, EntryScore } from \"./rating\";\nimport { analyzeScoreMethod } from \"./analyze\";\n\nexport const ContestsAnalysis = (props: {\n    numEntries: number;\n  contests: EntryRanking[][];\n  scoreFn: (rankings: EntryRanking[]) => EntryScore[];\n}) => {\n    const {numEntries, contests, scoreFn} = props;\n    const analysis = analyzeScoreMethod(numEntries, contests, scoreFn);\n    return <pre>\n        {`rank\\tcorrect\\tavg\\tL1\\tL2\\n`}\n{analysis.map((rank, i) => `${i+1}\\t${(rank.contestsCorrectToHere/rank.contests).toFixed(2)}\\t${(1 + rank.totalTrueRank/rank.contests).toFixed(2)}\\t${(rank.totalTrueRankL1Diff/rank.contests).toFixed(2)}\\t${Math.sqrt((rank.totalTrueRankL2Diff/rank.contests)).toFixed(2)}\\n`)}\n    </pre>\n};","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { ScoreApp } from \"./ScoreApp\";\nimport { AnalyzeApp } from \"./AnalyzeApp\";\n\nconst MODES: {[key: string]: React.FunctionComponent<{}>} = {\n  score: ScoreApp,\n  analyze: AnalyzeApp\n}\n\nconst defaultMode = 'score';\n\nconst App: React.FC = () => {\n  const [mode, setMode] = useState('score');\n\n  return (\n    <>\n      <div>\n        This page demonstrates using{\" \"}\n        <a href=\"https://trueskill.org/\">TrueSkill</a> to construct a voting\n        system where not every voter has to evaluate every entry. Each voter\n        instead ranks every entry they have an opinion about. We can get scores\n        (and therefore a consensus ranking) from these inputs by treating each\n        voter's ranking as the result of a free-for-all match between all the\n        entries they ranked, and use TrueSkill to update entry ratings based on\n        the results of each match.\n      </div>\n      <div>\n        Mode:\n        { \n          Object.keys(MODES).map(key =>\n            <>\n        <label><input type=\"radio\" name=\"mode\" value={key} checked={key===mode} onChange={event => setMode(event.target.value)}/>{key}</label>\n        </>\n          )\n        }\n      </div>\n      {React.createElement(MODES[mode], {})}\n      </>\n      );\n};\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { EntryRanking, scoreVotesByPoints, scoreVotesByAveragePoints, scoreVotesTrueSkill } from \"./rating\";\nimport { Form } from \"./Form\";\nimport { genEntries, simulate } from \"./simulation\";\nimport { ContestsAnalysis } from \"./ContestsAnalysis\";\n\nexport const AnalyzeApp: React.FC = () => {\n  const [contests, setContests] = useState<EntryRanking[][]>([]);\n  const [pointsParams, setPointsParams] = useState<{ pointsByRank: number[] }>({\n    pointsByRank: []\n  });\n  const [avgPointsParams, setAvgPointsParams] = useState({ smoothing: 0 });\n  const [tsParams, setTSParams] = useState({ optimism: -3, numSamples: 10 });\n  const [numEntries, setNumEntries] = useState(0);\n\n  return (\n    <div style={{ display: \"grid\", gridTemplateColumns: \"300px 25% 25% 25%\" }}>\n      <div>\n        <h3>Parameters</h3>\n        <Form\n          onSubmit={values => {\n            const contests: EntryRanking[][] = [];\n            for (let i = 0; i < parseInt(values.numContests, 10); ++i) {\n              const entries = genEntries(\n                { mu: 0, sigma2: 1 },\n                parseFloat(values.tasteDeviation),\n                {\n                  mu: parseFloat(values.pListenMean),\n                  sigma2: parseFloat(values.pListenStddev) ** 2\n                },\n                parseInt(values.numEntries, 10)\n              );\n              const rankings = simulate(\n                entries,\n                parseInt(values.numRankings, 10),\n                parseInt(values.maxRankingLength, 10)\n              );\n              contests.push(rankings);\n            }\n            setPointsParams({\n              pointsByRank: values.pointsByRank\n                .split(\",\")\n                .map(value => parseFloat(value))\n            });\n            setAvgPointsParams({ smoothing: parseFloat(values.smoothing) });\n            setTSParams({\n              optimism: parseFloat(values.optimism),\n              numSamples: parseInt(values.numTSSamples, 10)\n            });\n            setNumEntries(parseInt(values.numEntries, 10));\n            setContests(contests);\n          }}\n          inputs={{\n            // Analysis params\n            numContests: {\n              order: -1,\n              label: \"Number of contests\",\n              defaultValue: \"100\"\n            },\n            // Voting input sim params\n            numEntries: {\n              order: 0,\n              label: \"Number of entries\",\n              defaultValue: \"40\"\n            },\n            tasteDeviation: {\n              order: 1,\n              label: \"Taste deviation\",\n              defaultValue: \"0.3\"\n            },\n            pListenMean: {\n              order: 2,\n              label: \"Listen probability mean\",\n              defaultValue: \"0.5\"\n            },\n            pListenStddev: {\n              order: 3,\n              label: \"Listen probability stddev\",\n              defaultValue: \"0.2\"\n            },\n            numRankings: {\n              order: 4,\n              label: \"Number of rankings\",\n              defaultValue: \"20\"\n            },\n            maxRankingLength: {\n              order: 5,\n              label: \"Max ranking length\",\n              defaultValue: \"5\"\n            },\n            // points (and avg points) params\n            pointsByRank: {\n              order: 6,\n              label: \"Points by rank\",\n              defaultValue: \"5,4,3,2,1\"\n            },\n            // avg points params\n            smoothing: {\n              order: 7,\n              label: \"Average points smoothing\",\n              defaultValue: \"1\"\n            },\n            // Trueskill params\n            optimism: {\n              order: 8,\n              label: \"TS Optimism\",\n              defaultValue: \"-3\"\n            },\n            numTSSamples: {\n              order: 9,\n              label: \"TS Sample count\",\n              defaultValue: \"1\"\n            }\n          }}\n        />\n      </div>\n      <div>\n        <h3>Points</h3>\n        <ContestsAnalysis\n        numEntries={numEntries}\n          contests={contests}\n          scoreFn={(votes: EntryRanking[]) =>\n            scoreVotesByPoints(votes, pointsParams.pointsByRank)\n          }\n        />\n      </div>\n      <div>\n        <h3>Average Points</h3>\n        <ContestsAnalysis\n        numEntries={numEntries}\n          contests={contests}\n          scoreFn={(votes: EntryRanking[]) =>\n            scoreVotesByAveragePoints(votes, pointsParams.pointsByRank, avgPointsParams.smoothing)\n          }\n        />\n      </div>\n      <div>\n        <h3>TrueSkill</h3>\n        <ContestsAnalysis\n        numEntries={numEntries}\n          contests={contests}\n          scoreFn={(votes: EntryRanking[]) =>\n            scoreVotesTrueSkill(votes, tsParams.optimism, tsParams.numSamples)\n          }\n        />\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}